
stm32f4xx_stepper_engine_control.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001a8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00000a30  080001a8  080001a8  000101a8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000080  08000bd8  08000bd8  00010bd8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08000c58  08000c58  00010c60  2**0
                  CONTENTS
  4 .ARM          00000000  08000c58  08000c58  00010c60  2**0
                  CONTENTS
  5 .preinit_array 00000000  08000c58  08000c60  00010c60  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08000c58  08000c58  00010c58  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08000c5c  08000c5c  00010c5c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000000  20000000  20000000  00010c60  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000001c  20000000  08000c60  00020000  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000001c  08000c60  0002001c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00010c60  2**0
                  CONTENTS, READONLY
 12 .debug_info   00001433  00000000  00000000  00010c90  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00000393  00000000  00000000  000120c3  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 000000e0  00000000  00000000  00012458  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 000000b8  00000000  00000000  00012538  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  00001eae  00000000  00000000  000125f0  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   00000d0e  00000000  00000000  0001449e  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    00008bbb  00000000  00000000  000151ac  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  0001dd67  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00000304  00000000  00000000  0001dde4  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001a8 <__do_global_dtors_aux>:
 80001a8:	b510      	push	{r4, lr}
 80001aa:	4c05      	ldr	r4, [pc, #20]	; (80001c0 <__do_global_dtors_aux+0x18>)
 80001ac:	7823      	ldrb	r3, [r4, #0]
 80001ae:	b933      	cbnz	r3, 80001be <__do_global_dtors_aux+0x16>
 80001b0:	4b04      	ldr	r3, [pc, #16]	; (80001c4 <__do_global_dtors_aux+0x1c>)
 80001b2:	b113      	cbz	r3, 80001ba <__do_global_dtors_aux+0x12>
 80001b4:	4804      	ldr	r0, [pc, #16]	; (80001c8 <__do_global_dtors_aux+0x20>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	2301      	movs	r3, #1
 80001bc:	7023      	strb	r3, [r4, #0]
 80001be:	bd10      	pop	{r4, pc}
 80001c0:	20000000 	.word	0x20000000
 80001c4:	00000000 	.word	0x00000000
 80001c8:	08000bc0 	.word	0x08000bc0

080001cc <frame_dummy>:
 80001cc:	b508      	push	{r3, lr}
 80001ce:	4b03      	ldr	r3, [pc, #12]	; (80001dc <frame_dummy+0x10>)
 80001d0:	b11b      	cbz	r3, 80001da <frame_dummy+0xe>
 80001d2:	4903      	ldr	r1, [pc, #12]	; (80001e0 <frame_dummy+0x14>)
 80001d4:	4803      	ldr	r0, [pc, #12]	; (80001e4 <frame_dummy+0x18>)
 80001d6:	f3af 8000 	nop.w
 80001da:	bd08      	pop	{r3, pc}
 80001dc:	00000000 	.word	0x00000000
 80001e0:	20000004 	.word	0x20000004
 80001e4:	08000bc0 	.word	0x08000bc0

080001e8 <delay>:
#define M_SEC					1000
#define CW						1
#define RCW						0

void delay(int timeout)
{
 80001e8:	b480      	push	{r7}
 80001ea:	b085      	sub	sp, #20
 80001ec:	af00      	add	r7, sp, #0
 80001ee:	6078      	str	r0, [r7, #4]
	for(uint32_t i = 0 ; i < timeout ; i ++);
 80001f0:	2300      	movs	r3, #0
 80001f2:	60fb      	str	r3, [r7, #12]
 80001f4:	e002      	b.n	80001fc <delay+0x14>
 80001f6:	68fb      	ldr	r3, [r7, #12]
 80001f8:	3301      	adds	r3, #1
 80001fa:	60fb      	str	r3, [r7, #12]
 80001fc:	687b      	ldr	r3, [r7, #4]
 80001fe:	68fa      	ldr	r2, [r7, #12]
 8000200:	429a      	cmp	r2, r3
 8000202:	d3f8      	bcc.n	80001f6 <delay+0xe>
}
 8000204:	bf00      	nop
 8000206:	3714      	adds	r7, #20
 8000208:	46bd      	mov	sp, r7
 800020a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800020e:	4770      	bx	lr

08000210 <gpio_driver_function>:




void gpio_driver_function(GPIO_Handle_t in1, GPIO_Handle_t in2, GPIO_Handle_t in3, GPIO_Handle_t in4, GPIO_Handle_t green, GPIO_Handle_t orange, GPIO_Handle_t red, GPIO_Handle_t blue)
{
 8000210:	b082      	sub	sp, #8
 8000212:	b590      	push	{r4, r7, lr}
 8000214:	b089      	sub	sp, #36	; 0x24
 8000216:	af04      	add	r7, sp, #16
 8000218:	1d3c      	adds	r4, r7, #4
 800021a:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 800021e:	627b      	str	r3, [r7, #36]	; 0x24

	gpio_configure_pin(&in1, GPIOD, 8, GPIO_MODE_OUT, GPIO_SPPED_LOW, GPIO_OUT_MODE_PP, GPIO_DIS_PUPD, 0);
 8000220:	1d38      	adds	r0, r7, #4
 8000222:	2300      	movs	r3, #0
 8000224:	9303      	str	r3, [sp, #12]
 8000226:	2300      	movs	r3, #0
 8000228:	9302      	str	r3, [sp, #8]
 800022a:	2300      	movs	r3, #0
 800022c:	9301      	str	r3, [sp, #4]
 800022e:	2300      	movs	r3, #0
 8000230:	9300      	str	r3, [sp, #0]
 8000232:	2301      	movs	r3, #1
 8000234:	2208      	movs	r2, #8
 8000236:	4925      	ldr	r1, [pc, #148]	; (80002cc <gpio_driver_function+0xbc>)
 8000238:	f000 fc50 	bl	8000adc <gpio_configure_pin>
	gpio_init(&in1);
 800023c:	1d3b      	adds	r3, r7, #4
 800023e:	4618      	mov	r0, r3
 8000240:	f000 fa88 	bl	8000754 <gpio_init>
	gpio_configure_pin(&in2, GPIOE, 15, GPIO_MODE_OUT, GPIO_SPPED_LOW, GPIO_OUT_MODE_PP, GPIO_DIS_PUPD, 0);
 8000244:	f107 0024 	add.w	r0, r7, #36	; 0x24
 8000248:	2300      	movs	r3, #0
 800024a:	9303      	str	r3, [sp, #12]
 800024c:	2300      	movs	r3, #0
 800024e:	9302      	str	r3, [sp, #8]
 8000250:	2300      	movs	r3, #0
 8000252:	9301      	str	r3, [sp, #4]
 8000254:	2300      	movs	r3, #0
 8000256:	9300      	str	r3, [sp, #0]
 8000258:	2301      	movs	r3, #1
 800025a:	220f      	movs	r2, #15
 800025c:	491c      	ldr	r1, [pc, #112]	; (80002d0 <gpio_driver_function+0xc0>)
 800025e:	f000 fc3d 	bl	8000adc <gpio_configure_pin>
	gpio_init(&in2);
 8000262:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000266:	4618      	mov	r0, r3
 8000268:	f000 fa74 	bl	8000754 <gpio_init>
	gpio_configure_pin(&in3, GPIOD, 10, GPIO_MODE_OUT, GPIO_SPPED_LOW, GPIO_OUT_MODE_PP, GPIO_DIS_PUPD, 0);
 800026c:	f107 0030 	add.w	r0, r7, #48	; 0x30
 8000270:	2300      	movs	r3, #0
 8000272:	9303      	str	r3, [sp, #12]
 8000274:	2300      	movs	r3, #0
 8000276:	9302      	str	r3, [sp, #8]
 8000278:	2300      	movs	r3, #0
 800027a:	9301      	str	r3, [sp, #4]
 800027c:	2300      	movs	r3, #0
 800027e:	9300      	str	r3, [sp, #0]
 8000280:	2301      	movs	r3, #1
 8000282:	220a      	movs	r2, #10
 8000284:	4911      	ldr	r1, [pc, #68]	; (80002cc <gpio_driver_function+0xbc>)
 8000286:	f000 fc29 	bl	8000adc <gpio_configure_pin>
	gpio_init(&in3);
 800028a:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800028e:	4618      	mov	r0, r3
 8000290:	f000 fa60 	bl	8000754 <gpio_init>
	gpio_configure_pin(&in4, GPIOD, 11, GPIO_MODE_OUT, GPIO_SPPED_LOW, GPIO_OUT_MODE_PP, GPIO_DIS_PUPD, 0);
 8000294:	f107 003c 	add.w	r0, r7, #60	; 0x3c
 8000298:	2300      	movs	r3, #0
 800029a:	9303      	str	r3, [sp, #12]
 800029c:	2300      	movs	r3, #0
 800029e:	9302      	str	r3, [sp, #8]
 80002a0:	2300      	movs	r3, #0
 80002a2:	9301      	str	r3, [sp, #4]
 80002a4:	2300      	movs	r3, #0
 80002a6:	9300      	str	r3, [sp, #0]
 80002a8:	2301      	movs	r3, #1
 80002aa:	220b      	movs	r2, #11
 80002ac:	4907      	ldr	r1, [pc, #28]	; (80002cc <gpio_driver_function+0xbc>)
 80002ae:	f000 fc15 	bl	8000adc <gpio_configure_pin>
	gpio_init(&in4);
 80002b2:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 80002b6:	4618      	mov	r0, r3
 80002b8:	f000 fa4c 	bl	8000754 <gpio_init>

}
 80002bc:	bf00      	nop
 80002be:	3714      	adds	r7, #20
 80002c0:	46bd      	mov	sp, r7
 80002c2:	e8bd 4090 	ldmia.w	sp!, {r4, r7, lr}
 80002c6:	b002      	add	sp, #8
 80002c8:	4770      	bx	lr
 80002ca:	bf00      	nop
 80002cc:	40020c00 	.word	0x40020c00
 80002d0:	40021000 	.word	0x40021000

080002d4 <motor_run>:

void motor_run(int timeout, int cycles, int cw)
{
 80002d4:	b5b0      	push	{r4, r5, r7, lr}
 80002d6:	b0b8      	sub	sp, #224	; 0xe0
 80002d8:	af00      	add	r7, sp, #0
 80002da:	60f8      	str	r0, [r7, #12]
 80002dc:	60b9      	str	r1, [r7, #8]
 80002de:	607a      	str	r2, [r7, #4]

	int steps[4][4];
	int cw_values[4][4] = {{1,0,0,0}, {0,1,0,0}, {0,0,1,0}, {0,0,0,1}};
 80002e0:	4b63      	ldr	r3, [pc, #396]	; (8000470 <motor_run+0x19c>)
 80002e2:	f107 0450 	add.w	r4, r7, #80	; 0x50
 80002e6:	461d      	mov	r5, r3
 80002e8:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80002ea:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80002ec:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80002ee:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80002f0:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80002f2:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80002f4:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 80002f8:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
	int rcw_values[4][4] = {{0,0,0,1}, {0,0,1,0}, {0,1,0,0}, {1,0,0,0}};
 80002fc:	4b5d      	ldr	r3, [pc, #372]	; (8000474 <motor_run+0x1a0>)
 80002fe:	f107 0410 	add.w	r4, r7, #16
 8000302:	461d      	mov	r5, r3
 8000304:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000306:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000308:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800030a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800030c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800030e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000310:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 8000314:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}

	for (int i=0; i<4; i++)
 8000318:	2300      	movs	r3, #0
 800031a:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 800031e:	e048      	b.n	80003b2 <motor_run+0xde>
	{
		for (int j=0; j<4; j++)
 8000320:	2300      	movs	r3, #0
 8000322:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8000326:	e03b      	b.n	80003a0 <motor_run+0xcc>
		{
			if (cw == CW)
 8000328:	687b      	ldr	r3, [r7, #4]
 800032a:	2b01      	cmp	r3, #1
 800032c:	d118      	bne.n	8000360 <motor_run+0x8c>
			{
				steps[i][j] = cw_values[i][j];
 800032e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8000332:	009a      	lsls	r2, r3, #2
 8000334:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8000338:	4413      	add	r3, r2
 800033a:	009b      	lsls	r3, r3, #2
 800033c:	f107 02e0 	add.w	r2, r7, #224	; 0xe0
 8000340:	4413      	add	r3, r2
 8000342:	f853 2c90 	ldr.w	r2, [r3, #-144]
 8000346:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800034a:	0099      	lsls	r1, r3, #2
 800034c:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8000350:	440b      	add	r3, r1
 8000352:	009b      	lsls	r3, r3, #2
 8000354:	f107 01e0 	add.w	r1, r7, #224	; 0xe0
 8000358:	440b      	add	r3, r1
 800035a:	f843 2c50 	str.w	r2, [r3, #-80]
 800035e:	e01a      	b.n	8000396 <motor_run+0xc2>
			}
			else if (cw == RCW)
 8000360:	687b      	ldr	r3, [r7, #4]
 8000362:	2b00      	cmp	r3, #0
 8000364:	d117      	bne.n	8000396 <motor_run+0xc2>
			{
				steps[i][j] = rcw_values[i][j];
 8000366:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800036a:	009a      	lsls	r2, r3, #2
 800036c:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8000370:	4413      	add	r3, r2
 8000372:	009b      	lsls	r3, r3, #2
 8000374:	f107 02e0 	add.w	r2, r7, #224	; 0xe0
 8000378:	4413      	add	r3, r2
 800037a:	f853 2cd0 	ldr.w	r2, [r3, #-208]
 800037e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8000382:	0099      	lsls	r1, r3, #2
 8000384:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8000388:	440b      	add	r3, r1
 800038a:	009b      	lsls	r3, r3, #2
 800038c:	f107 01e0 	add.w	r1, r7, #224	; 0xe0
 8000390:	440b      	add	r3, r1
 8000392:	f843 2c50 	str.w	r2, [r3, #-80]
		for (int j=0; j<4; j++)
 8000396:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800039a:	3301      	adds	r3, #1
 800039c:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 80003a0:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80003a4:	2b03      	cmp	r3, #3
 80003a6:	ddbf      	ble.n	8000328 <motor_run+0x54>
	for (int i=0; i<4; i++)
 80003a8:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80003ac:	3301      	adds	r3, #1
 80003ae:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 80003b2:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80003b6:	2b03      	cmp	r3, #3
 80003b8:	ddb2      	ble.n	8000320 <motor_run+0x4c>

		}
	}


	for (int cycle=0; cycle<cycles; cycle++)
 80003ba:	2300      	movs	r3, #0
 80003bc:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 80003c0:	e04c      	b.n	800045c <motor_run+0x188>
	{
		for (int values_set = 0; values_set < 4; values_set++)
 80003c2:	2300      	movs	r3, #0
 80003c4:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 80003c8:	e03f      	b.n	800044a <motor_run+0x176>
		{
			gpio_write_to_pin(GPIOD, 8, steps[values_set][0]);
 80003ca:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 80003ce:	011b      	lsls	r3, r3, #4
 80003d0:	f107 02e0 	add.w	r2, r7, #224	; 0xe0
 80003d4:	4413      	add	r3, r2
 80003d6:	3b50      	subs	r3, #80	; 0x50
 80003d8:	681b      	ldr	r3, [r3, #0]
 80003da:	b2db      	uxtb	r3, r3
 80003dc:	461a      	mov	r2, r3
 80003de:	2108      	movs	r1, #8
 80003e0:	4825      	ldr	r0, [pc, #148]	; (8000478 <motor_run+0x1a4>)
 80003e2:	f000 fba3 	bl	8000b2c <gpio_write_to_pin>
			gpio_write_to_pin(GPIOE, 15, steps[values_set][1]);
 80003e6:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 80003ea:	011b      	lsls	r3, r3, #4
 80003ec:	f107 02e0 	add.w	r2, r7, #224	; 0xe0
 80003f0:	4413      	add	r3, r2
 80003f2:	3b4c      	subs	r3, #76	; 0x4c
 80003f4:	681b      	ldr	r3, [r3, #0]
 80003f6:	b2db      	uxtb	r3, r3
 80003f8:	461a      	mov	r2, r3
 80003fa:	210f      	movs	r1, #15
 80003fc:	481f      	ldr	r0, [pc, #124]	; (800047c <motor_run+0x1a8>)
 80003fe:	f000 fb95 	bl	8000b2c <gpio_write_to_pin>
			gpio_write_to_pin(GPIOD, 10, steps[values_set][2]);
 8000402:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 8000406:	011b      	lsls	r3, r3, #4
 8000408:	f107 02e0 	add.w	r2, r7, #224	; 0xe0
 800040c:	4413      	add	r3, r2
 800040e:	3b48      	subs	r3, #72	; 0x48
 8000410:	681b      	ldr	r3, [r3, #0]
 8000412:	b2db      	uxtb	r3, r3
 8000414:	461a      	mov	r2, r3
 8000416:	210a      	movs	r1, #10
 8000418:	4817      	ldr	r0, [pc, #92]	; (8000478 <motor_run+0x1a4>)
 800041a:	f000 fb87 	bl	8000b2c <gpio_write_to_pin>
			gpio_write_to_pin(GPIOD, 11, steps[values_set][3]);
 800041e:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 8000422:	011b      	lsls	r3, r3, #4
 8000424:	f107 02e0 	add.w	r2, r7, #224	; 0xe0
 8000428:	4413      	add	r3, r2
 800042a:	3b44      	subs	r3, #68	; 0x44
 800042c:	681b      	ldr	r3, [r3, #0]
 800042e:	b2db      	uxtb	r3, r3
 8000430:	461a      	mov	r2, r3
 8000432:	210b      	movs	r1, #11
 8000434:	4810      	ldr	r0, [pc, #64]	; (8000478 <motor_run+0x1a4>)
 8000436:	f000 fb79 	bl	8000b2c <gpio_write_to_pin>
			delay(timeout);
 800043a:	68f8      	ldr	r0, [r7, #12]
 800043c:	f7ff fed4 	bl	80001e8 <delay>
		for (int values_set = 0; values_set < 4; values_set++)
 8000440:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 8000444:	3301      	adds	r3, #1
 8000446:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 800044a:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 800044e:	2b03      	cmp	r3, #3
 8000450:	ddbb      	ble.n	80003ca <motor_run+0xf6>
	for (int cycle=0; cycle<cycles; cycle++)
 8000452:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8000456:	3301      	adds	r3, #1
 8000458:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 800045c:	f8d7 20d4 	ldr.w	r2, [r7, #212]	; 0xd4
 8000460:	68bb      	ldr	r3, [r7, #8]
 8000462:	429a      	cmp	r2, r3
 8000464:	dbad      	blt.n	80003c2 <motor_run+0xee>
		}
	}
}
 8000466:	bf00      	nop
 8000468:	37e0      	adds	r7, #224	; 0xe0
 800046a:	46bd      	mov	sp, r7
 800046c:	bdb0      	pop	{r4, r5, r7, pc}
 800046e:	bf00      	nop
 8000470:	08000bd8 	.word	0x08000bd8
 8000474:	08000c18 	.word	0x08000c18
 8000478:	40020c00 	.word	0x40020c00
 800047c:	40021000 	.word	0x40021000

08000480 <main>:

int main(void)
{
 8000480:	b590      	push	{r4, r7, lr}
 8000482:	b0af      	sub	sp, #188	; 0xbc
 8000484:	af14      	add	r7, sp, #80	; 0x50
	GPIO_Handle_t in1,in2, in3, in4, green_led, orange_led, red_led, blue_led;
	gpio_driver_function(in1, in2, in3, in4, green_led, orange_led, red_led, blue_led);
 8000486:	ac11      	add	r4, sp, #68	; 0x44
 8000488:	1d3b      	adds	r3, r7, #4
 800048a:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 800048e:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8000492:	ac0e      	add	r4, sp, #56	; 0x38
 8000494:	f107 0310 	add.w	r3, r7, #16
 8000498:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 800049c:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 80004a0:	ac0b      	add	r4, sp, #44	; 0x2c
 80004a2:	f107 031c 	add.w	r3, r7, #28
 80004a6:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 80004aa:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 80004ae:	ac08      	add	r4, sp, #32
 80004b0:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80004b4:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 80004b8:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 80004bc:	ac05      	add	r4, sp, #20
 80004be:	f107 0334 	add.w	r3, r7, #52	; 0x34
 80004c2:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 80004c6:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 80004ca:	ac02      	add	r4, sp, #8
 80004cc:	f107 0340 	add.w	r3, r7, #64	; 0x40
 80004d0:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 80004d4:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 80004d8:	466a      	mov	r2, sp
 80004da:	f107 0350 	add.w	r3, r7, #80	; 0x50
 80004de:	e893 0003 	ldmia.w	r3, {r0, r1}
 80004e2:	e882 0003 	stmia.w	r2, {r0, r1}
 80004e6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80004e8:	f107 0258 	add.w	r2, r7, #88	; 0x58
 80004ec:	ca07      	ldmia	r2, {r0, r1, r2}
 80004ee:	f7ff fe8f 	bl	8000210 <gpio_driver_function>

	for (int i=0; i<10 ; i++)
 80004f2:	2300      	movs	r3, #0
 80004f4:	667b      	str	r3, [r7, #100]	; 0x64
 80004f6:	e012      	b.n	800051e <main+0x9e>
	{
	motor_run(2*M_SEC, MOTOR_QUARTER_ROUND, CW);
 80004f8:	2201      	movs	r2, #1
 80004fa:	2182      	movs	r1, #130	; 0x82
 80004fc:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8000500:	f7ff fee8 	bl	80002d4 <motor_run>
	delay(5*M_SEC);
 8000504:	f241 3088 	movw	r0, #5000	; 0x1388
 8000508:	f7ff fe6e 	bl	80001e8 <delay>
	motor_run(2*M_SEC, MOTOR_QUARTER_ROUND, RCW);
 800050c:	2200      	movs	r2, #0
 800050e:	2182      	movs	r1, #130	; 0x82
 8000510:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8000514:	f7ff fede 	bl	80002d4 <motor_run>
	for (int i=0; i<10 ; i++)
 8000518:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800051a:	3301      	adds	r3, #1
 800051c:	667b      	str	r3, [r7, #100]	; 0x64
 800051e:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8000520:	2b09      	cmp	r3, #9
 8000522:	dde9      	ble.n	80004f8 <main+0x78>
	}

return 0;
 8000524:	2300      	movs	r3, #0
}
 8000526:	4618      	mov	r0, r3
 8000528:	376c      	adds	r7, #108	; 0x6c
 800052a:	46bd      	mov	sp, r7
 800052c:	bd90      	pop	{r4, r7, pc}
	...

08000530 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000530:	480d      	ldr	r0, [pc, #52]	; (8000568 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8000532:	4685      	mov	sp, r0
/* Call the clock system intitialization function.*/
  bl  SystemInit
 8000534:	f3af 8000 	nop.w

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000538:	480c      	ldr	r0, [pc, #48]	; (800056c <LoopForever+0x6>)
  ldr r1, =_edata
 800053a:	490d      	ldr	r1, [pc, #52]	; (8000570 <LoopForever+0xa>)
  ldr r2, =_sidata
 800053c:	4a0d      	ldr	r2, [pc, #52]	; (8000574 <LoopForever+0xe>)
  movs r3, #0
 800053e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000540:	e002      	b.n	8000548 <LoopCopyDataInit>

08000542 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000542:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000544:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000546:	3304      	adds	r3, #4

08000548 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000548:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800054a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800054c:	d3f9      	bcc.n	8000542 <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800054e:	4a0a      	ldr	r2, [pc, #40]	; (8000578 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000550:	4c0a      	ldr	r4, [pc, #40]	; (800057c <LoopForever+0x16>)
  movs r3, #0
 8000552:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000554:	e001      	b.n	800055a <LoopFillZerobss>

08000556 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000556:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000558:	3204      	adds	r2, #4

0800055a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800055a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800055c:	d3fb      	bcc.n	8000556 <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 800055e:	f000 fb0b 	bl	8000b78 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000562:	f7ff ff8d 	bl	8000480 <main>

08000566 <LoopForever>:

LoopForever:
    b LoopForever
 8000566:	e7fe      	b.n	8000566 <LoopForever>
  ldr   r0, =_estack
 8000568:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 800056c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000570:	20000000 	.word	0x20000000
  ldr r2, =_sidata
 8000574:	08000c60 	.word	0x08000c60
  ldr r2, =_sbss
 8000578:	20000000 	.word	0x20000000
  ldr r4, =_ebss
 800057c:	2000001c 	.word	0x2000001c

08000580 <ADC_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000580:	e7fe      	b.n	8000580 <ADC_IRQHandler>
	...

08000584 <gpio_clk_control>:

/******************************************************
				1.GPIO CLK control
*******************************************************/
void gpio_clk_control(GPIO_RegDef_t *pGPIOx,uint8_t enable)
{
 8000584:	b480      	push	{r7}
 8000586:	b083      	sub	sp, #12
 8000588:	af00      	add	r7, sp, #0
 800058a:	6078      	str	r0, [r7, #4]
 800058c:	460b      	mov	r3, r1
 800058e:	70fb      	strb	r3, [r7, #3]
	if (enable)
 8000590:	78fb      	ldrb	r3, [r7, #3]
 8000592:	2b00      	cmp	r3, #0
 8000594:	d062      	beq.n	800065c <gpio_clk_control+0xd8>
	{
		if (pGPIOx == GPIOA)
 8000596:	687b      	ldr	r3, [r7, #4]
 8000598:	4a64      	ldr	r2, [pc, #400]	; (800072c <gpio_clk_control+0x1a8>)
 800059a:	4293      	cmp	r3, r2
 800059c:	d106      	bne.n	80005ac <gpio_clk_control+0x28>
		{
			GPIOA_CLK_EN();
 800059e:	4b64      	ldr	r3, [pc, #400]	; (8000730 <gpio_clk_control+0x1ac>)
 80005a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80005a2:	4a63      	ldr	r2, [pc, #396]	; (8000730 <gpio_clk_control+0x1ac>)
 80005a4:	f043 0301 	orr.w	r3, r3, #1
 80005a8:	6313      	str	r3, [r2, #48]	; 0x30
			GPIOI_CLK_DI();
		}

	}

}
 80005aa:	e0b9      	b.n	8000720 <gpio_clk_control+0x19c>
		else if(pGPIOx == GPIOB)
 80005ac:	687b      	ldr	r3, [r7, #4]
 80005ae:	4a61      	ldr	r2, [pc, #388]	; (8000734 <gpio_clk_control+0x1b0>)
 80005b0:	4293      	cmp	r3, r2
 80005b2:	d106      	bne.n	80005c2 <gpio_clk_control+0x3e>
			GPIOB_CLK_EN();
 80005b4:	4b5e      	ldr	r3, [pc, #376]	; (8000730 <gpio_clk_control+0x1ac>)
 80005b6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80005b8:	4a5d      	ldr	r2, [pc, #372]	; (8000730 <gpio_clk_control+0x1ac>)
 80005ba:	f043 0302 	orr.w	r3, r3, #2
 80005be:	6313      	str	r3, [r2, #48]	; 0x30
}
 80005c0:	e0ae      	b.n	8000720 <gpio_clk_control+0x19c>
		else if (pGPIOx == GPIOC)
 80005c2:	687b      	ldr	r3, [r7, #4]
 80005c4:	4a5c      	ldr	r2, [pc, #368]	; (8000738 <gpio_clk_control+0x1b4>)
 80005c6:	4293      	cmp	r3, r2
 80005c8:	d106      	bne.n	80005d8 <gpio_clk_control+0x54>
			GPIOC_CLK_EN();
 80005ca:	4b59      	ldr	r3, [pc, #356]	; (8000730 <gpio_clk_control+0x1ac>)
 80005cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80005ce:	4a58      	ldr	r2, [pc, #352]	; (8000730 <gpio_clk_control+0x1ac>)
 80005d0:	f043 0304 	orr.w	r3, r3, #4
 80005d4:	6313      	str	r3, [r2, #48]	; 0x30
}
 80005d6:	e0a3      	b.n	8000720 <gpio_clk_control+0x19c>
		else if(pGPIOx == GPIOD)
 80005d8:	687b      	ldr	r3, [r7, #4]
 80005da:	4a58      	ldr	r2, [pc, #352]	; (800073c <gpio_clk_control+0x1b8>)
 80005dc:	4293      	cmp	r3, r2
 80005de:	d106      	bne.n	80005ee <gpio_clk_control+0x6a>
			GPIOD_CLK_EN();
 80005e0:	4b53      	ldr	r3, [pc, #332]	; (8000730 <gpio_clk_control+0x1ac>)
 80005e2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80005e4:	4a52      	ldr	r2, [pc, #328]	; (8000730 <gpio_clk_control+0x1ac>)
 80005e6:	f043 0308 	orr.w	r3, r3, #8
 80005ea:	6313      	str	r3, [r2, #48]	; 0x30
}
 80005ec:	e098      	b.n	8000720 <gpio_clk_control+0x19c>
		else if(pGPIOx == GPIOE)
 80005ee:	687b      	ldr	r3, [r7, #4]
 80005f0:	4a53      	ldr	r2, [pc, #332]	; (8000740 <gpio_clk_control+0x1bc>)
 80005f2:	4293      	cmp	r3, r2
 80005f4:	d106      	bne.n	8000604 <gpio_clk_control+0x80>
			GPIOE_CLK_EN();
 80005f6:	4b4e      	ldr	r3, [pc, #312]	; (8000730 <gpio_clk_control+0x1ac>)
 80005f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80005fa:	4a4d      	ldr	r2, [pc, #308]	; (8000730 <gpio_clk_control+0x1ac>)
 80005fc:	f043 0310 	orr.w	r3, r3, #16
 8000600:	6313      	str	r3, [r2, #48]	; 0x30
}
 8000602:	e08d      	b.n	8000720 <gpio_clk_control+0x19c>
		else if(pGPIOx == GPIOF)
 8000604:	687b      	ldr	r3, [r7, #4]
 8000606:	4a4f      	ldr	r2, [pc, #316]	; (8000744 <gpio_clk_control+0x1c0>)
 8000608:	4293      	cmp	r3, r2
 800060a:	d106      	bne.n	800061a <gpio_clk_control+0x96>
			GPIOF_CLK_EN();
 800060c:	4b48      	ldr	r3, [pc, #288]	; (8000730 <gpio_clk_control+0x1ac>)
 800060e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000610:	4a47      	ldr	r2, [pc, #284]	; (8000730 <gpio_clk_control+0x1ac>)
 8000612:	f043 0320 	orr.w	r3, r3, #32
 8000616:	6313      	str	r3, [r2, #48]	; 0x30
}
 8000618:	e082      	b.n	8000720 <gpio_clk_control+0x19c>
		else if(pGPIOx == GPIOG)
 800061a:	687b      	ldr	r3, [r7, #4]
 800061c:	4a4a      	ldr	r2, [pc, #296]	; (8000748 <gpio_clk_control+0x1c4>)
 800061e:	4293      	cmp	r3, r2
 8000620:	d106      	bne.n	8000630 <gpio_clk_control+0xac>
			GPIOG_CLK_EN();
 8000622:	4b43      	ldr	r3, [pc, #268]	; (8000730 <gpio_clk_control+0x1ac>)
 8000624:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000626:	4a42      	ldr	r2, [pc, #264]	; (8000730 <gpio_clk_control+0x1ac>)
 8000628:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800062c:	6313      	str	r3, [r2, #48]	; 0x30
}
 800062e:	e077      	b.n	8000720 <gpio_clk_control+0x19c>
		else if(pGPIOx == GPIOH)
 8000630:	687b      	ldr	r3, [r7, #4]
 8000632:	4a46      	ldr	r2, [pc, #280]	; (800074c <gpio_clk_control+0x1c8>)
 8000634:	4293      	cmp	r3, r2
 8000636:	d106      	bne.n	8000646 <gpio_clk_control+0xc2>
			GPIOH_CLK_EN();
 8000638:	4b3d      	ldr	r3, [pc, #244]	; (8000730 <gpio_clk_control+0x1ac>)
 800063a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800063c:	4a3c      	ldr	r2, [pc, #240]	; (8000730 <gpio_clk_control+0x1ac>)
 800063e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000642:	6313      	str	r3, [r2, #48]	; 0x30
}
 8000644:	e06c      	b.n	8000720 <gpio_clk_control+0x19c>
		else if(pGPIOx == GPIOI)
 8000646:	687b      	ldr	r3, [r7, #4]
 8000648:	4a41      	ldr	r2, [pc, #260]	; (8000750 <gpio_clk_control+0x1cc>)
 800064a:	4293      	cmp	r3, r2
 800064c:	d168      	bne.n	8000720 <gpio_clk_control+0x19c>
			GPIOI_CLK_EN();
 800064e:	4b38      	ldr	r3, [pc, #224]	; (8000730 <gpio_clk_control+0x1ac>)
 8000650:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000652:	4a37      	ldr	r2, [pc, #220]	; (8000730 <gpio_clk_control+0x1ac>)
 8000654:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000658:	6313      	str	r3, [r2, #48]	; 0x30
}
 800065a:	e061      	b.n	8000720 <gpio_clk_control+0x19c>
		if (pGPIOx == GPIOA)
 800065c:	687b      	ldr	r3, [r7, #4]
 800065e:	4a33      	ldr	r2, [pc, #204]	; (800072c <gpio_clk_control+0x1a8>)
 8000660:	4293      	cmp	r3, r2
 8000662:	d106      	bne.n	8000672 <gpio_clk_control+0xee>
			GPIOA_CLK_DI();
 8000664:	4b32      	ldr	r3, [pc, #200]	; (8000730 <gpio_clk_control+0x1ac>)
 8000666:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000668:	4a31      	ldr	r2, [pc, #196]	; (8000730 <gpio_clk_control+0x1ac>)
 800066a:	f023 0301 	bic.w	r3, r3, #1
 800066e:	6313      	str	r3, [r2, #48]	; 0x30
}
 8000670:	e056      	b.n	8000720 <gpio_clk_control+0x19c>
		else if(pGPIOx == GPIOB)
 8000672:	687b      	ldr	r3, [r7, #4]
 8000674:	4a2f      	ldr	r2, [pc, #188]	; (8000734 <gpio_clk_control+0x1b0>)
 8000676:	4293      	cmp	r3, r2
 8000678:	d106      	bne.n	8000688 <gpio_clk_control+0x104>
			GPIOB_CLK_DI();
 800067a:	4b2d      	ldr	r3, [pc, #180]	; (8000730 <gpio_clk_control+0x1ac>)
 800067c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800067e:	4a2c      	ldr	r2, [pc, #176]	; (8000730 <gpio_clk_control+0x1ac>)
 8000680:	f023 0302 	bic.w	r3, r3, #2
 8000684:	6313      	str	r3, [r2, #48]	; 0x30
}
 8000686:	e04b      	b.n	8000720 <gpio_clk_control+0x19c>
		else if (pGPIOx == GPIOC)
 8000688:	687b      	ldr	r3, [r7, #4]
 800068a:	4a2b      	ldr	r2, [pc, #172]	; (8000738 <gpio_clk_control+0x1b4>)
 800068c:	4293      	cmp	r3, r2
 800068e:	d106      	bne.n	800069e <gpio_clk_control+0x11a>
			GPIOC_CLK_DI();
 8000690:	4b27      	ldr	r3, [pc, #156]	; (8000730 <gpio_clk_control+0x1ac>)
 8000692:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000694:	4a26      	ldr	r2, [pc, #152]	; (8000730 <gpio_clk_control+0x1ac>)
 8000696:	f023 0304 	bic.w	r3, r3, #4
 800069a:	6313      	str	r3, [r2, #48]	; 0x30
}
 800069c:	e040      	b.n	8000720 <gpio_clk_control+0x19c>
		else if(pGPIOx == GPIOD)
 800069e:	687b      	ldr	r3, [r7, #4]
 80006a0:	4a26      	ldr	r2, [pc, #152]	; (800073c <gpio_clk_control+0x1b8>)
 80006a2:	4293      	cmp	r3, r2
 80006a4:	d106      	bne.n	80006b4 <gpio_clk_control+0x130>
			GPIOD_CLK_DI();
 80006a6:	4b22      	ldr	r3, [pc, #136]	; (8000730 <gpio_clk_control+0x1ac>)
 80006a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80006aa:	4a21      	ldr	r2, [pc, #132]	; (8000730 <gpio_clk_control+0x1ac>)
 80006ac:	f023 0308 	bic.w	r3, r3, #8
 80006b0:	6313      	str	r3, [r2, #48]	; 0x30
}
 80006b2:	e035      	b.n	8000720 <gpio_clk_control+0x19c>
		else if(pGPIOx == GPIOE)
 80006b4:	687b      	ldr	r3, [r7, #4]
 80006b6:	4a22      	ldr	r2, [pc, #136]	; (8000740 <gpio_clk_control+0x1bc>)
 80006b8:	4293      	cmp	r3, r2
 80006ba:	d106      	bne.n	80006ca <gpio_clk_control+0x146>
			GPIOE_CLK_DI();
 80006bc:	4b1c      	ldr	r3, [pc, #112]	; (8000730 <gpio_clk_control+0x1ac>)
 80006be:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80006c0:	4a1b      	ldr	r2, [pc, #108]	; (8000730 <gpio_clk_control+0x1ac>)
 80006c2:	f023 0310 	bic.w	r3, r3, #16
 80006c6:	6313      	str	r3, [r2, #48]	; 0x30
}
 80006c8:	e02a      	b.n	8000720 <gpio_clk_control+0x19c>
		else if(pGPIOx == GPIOF)
 80006ca:	687b      	ldr	r3, [r7, #4]
 80006cc:	4a1d      	ldr	r2, [pc, #116]	; (8000744 <gpio_clk_control+0x1c0>)
 80006ce:	4293      	cmp	r3, r2
 80006d0:	d106      	bne.n	80006e0 <gpio_clk_control+0x15c>
			GPIOF_CLK_DI();
 80006d2:	4b17      	ldr	r3, [pc, #92]	; (8000730 <gpio_clk_control+0x1ac>)
 80006d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80006d6:	4a16      	ldr	r2, [pc, #88]	; (8000730 <gpio_clk_control+0x1ac>)
 80006d8:	f023 0320 	bic.w	r3, r3, #32
 80006dc:	6313      	str	r3, [r2, #48]	; 0x30
}
 80006de:	e01f      	b.n	8000720 <gpio_clk_control+0x19c>
		else if(pGPIOx == GPIOG)
 80006e0:	687b      	ldr	r3, [r7, #4]
 80006e2:	4a19      	ldr	r2, [pc, #100]	; (8000748 <gpio_clk_control+0x1c4>)
 80006e4:	4293      	cmp	r3, r2
 80006e6:	d106      	bne.n	80006f6 <gpio_clk_control+0x172>
			GPIOG_CLK_DI();
 80006e8:	4b11      	ldr	r3, [pc, #68]	; (8000730 <gpio_clk_control+0x1ac>)
 80006ea:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80006ec:	4a10      	ldr	r2, [pc, #64]	; (8000730 <gpio_clk_control+0x1ac>)
 80006ee:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80006f2:	6313      	str	r3, [r2, #48]	; 0x30
}
 80006f4:	e014      	b.n	8000720 <gpio_clk_control+0x19c>
		else if(pGPIOx == GPIOH)
 80006f6:	687b      	ldr	r3, [r7, #4]
 80006f8:	4a14      	ldr	r2, [pc, #80]	; (800074c <gpio_clk_control+0x1c8>)
 80006fa:	4293      	cmp	r3, r2
 80006fc:	d106      	bne.n	800070c <gpio_clk_control+0x188>
			GPIOH_CLK_DI();
 80006fe:	4b0c      	ldr	r3, [pc, #48]	; (8000730 <gpio_clk_control+0x1ac>)
 8000700:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000702:	4a0b      	ldr	r2, [pc, #44]	; (8000730 <gpio_clk_control+0x1ac>)
 8000704:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8000708:	6313      	str	r3, [r2, #48]	; 0x30
}
 800070a:	e009      	b.n	8000720 <gpio_clk_control+0x19c>
		else if(pGPIOx == GPIOI)
 800070c:	687b      	ldr	r3, [r7, #4]
 800070e:	4a10      	ldr	r2, [pc, #64]	; (8000750 <gpio_clk_control+0x1cc>)
 8000710:	4293      	cmp	r3, r2
 8000712:	d105      	bne.n	8000720 <gpio_clk_control+0x19c>
			GPIOI_CLK_DI();
 8000714:	4b06      	ldr	r3, [pc, #24]	; (8000730 <gpio_clk_control+0x1ac>)
 8000716:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000718:	4a05      	ldr	r2, [pc, #20]	; (8000730 <gpio_clk_control+0x1ac>)
 800071a:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800071e:	6313      	str	r3, [r2, #48]	; 0x30
}
 8000720:	bf00      	nop
 8000722:	370c      	adds	r7, #12
 8000724:	46bd      	mov	sp, r7
 8000726:	f85d 7b04 	ldr.w	r7, [sp], #4
 800072a:	4770      	bx	lr
 800072c:	40020000 	.word	0x40020000
 8000730:	40023800 	.word	0x40023800
 8000734:	40020400 	.word	0x40020400
 8000738:	40020800 	.word	0x40020800
 800073c:	40020c00 	.word	0x40020c00
 8000740:	40021000 	.word	0x40021000
 8000744:	40021400 	.word	0x40021400
 8000748:	40021800 	.word	0x40021800
 800074c:	40021c00 	.word	0x40021c00
 8000750:	40022000 	.word	0x40022000

08000754 <gpio_init>:

/******************************************************
				2.GPIO initializations
*******************************************************/
void gpio_init(GPIO_Handle_t *pGPIOHandle)
{
 8000754:	b580      	push	{r7, lr}
 8000756:	b088      	sub	sp, #32
 8000758:	af00      	add	r7, sp, #0
 800075a:	6078      	str	r0, [r7, #4]

	gpio_clk_control(pGPIOHandle->pGPIOx, ENABLE);/*Initializes the clock control*/
 800075c:	687b      	ldr	r3, [r7, #4]
 800075e:	681b      	ldr	r3, [r3, #0]
 8000760:	2101      	movs	r1, #1
 8000762:	4618      	mov	r0, r3
 8000764:	f7ff ff0e 	bl	8000584 <gpio_clk_control>
	uint32_t temp=0;
 8000768:	2300      	movs	r3, #0
 800076a:	61bb      	str	r3, [r7, #24]

	/* 1.Configure GPIO pin mode - each pin has 2 dedicated bits in the GPIO mode register
	hence the value is shifted with multiplication  of 2 relative to pin #. */

	//1.1.Non interrupt mode
	if (pGPIOHandle->GPIO_PinCfng.PinMode <= GPIO_MODE_ANALOG)
 800076c:	687b      	ldr	r3, [r7, #4]
 800076e:	795b      	ldrb	r3, [r3, #5]
 8000770:	2b03      	cmp	r3, #3
 8000772:	d821      	bhi.n	80007b8 <gpio_init+0x64>
	{

		temp = (pGPIOHandle->GPIO_PinCfng.PinMode << (2* pGPIOHandle->GPIO_PinCfng.PinNumber));
 8000774:	687b      	ldr	r3, [r7, #4]
 8000776:	795b      	ldrb	r3, [r3, #5]
 8000778:	461a      	mov	r2, r3
 800077a:	687b      	ldr	r3, [r7, #4]
 800077c:	791b      	ldrb	r3, [r3, #4]
 800077e:	005b      	lsls	r3, r3, #1
 8000780:	fa02 f303 	lsl.w	r3, r2, r3
 8000784:	61bb      	str	r3, [r7, #24]
		pGPIOHandle->pGPIOx->MODER &= ~(0x3 << pGPIOHandle->GPIO_PinCfng.PinNumber); //Clear the 2 bits
 8000786:	687b      	ldr	r3, [r7, #4]
 8000788:	681b      	ldr	r3, [r3, #0]
 800078a:	681a      	ldr	r2, [r3, #0]
 800078c:	687b      	ldr	r3, [r7, #4]
 800078e:	791b      	ldrb	r3, [r3, #4]
 8000790:	4619      	mov	r1, r3
 8000792:	2303      	movs	r3, #3
 8000794:	408b      	lsls	r3, r1
 8000796:	43db      	mvns	r3, r3
 8000798:	4619      	mov	r1, r3
 800079a:	687b      	ldr	r3, [r7, #4]
 800079c:	681b      	ldr	r3, [r3, #0]
 800079e:	400a      	ands	r2, r1
 80007a0:	601a      	str	r2, [r3, #0]
		pGPIOHandle->pGPIOx->MODER |= temp;// Write to the 2 bits
 80007a2:	687b      	ldr	r3, [r7, #4]
 80007a4:	681b      	ldr	r3, [r3, #0]
 80007a6:	6819      	ldr	r1, [r3, #0]
 80007a8:	687b      	ldr	r3, [r7, #4]
 80007aa:	681b      	ldr	r3, [r3, #0]
 80007ac:	69ba      	ldr	r2, [r7, #24]
 80007ae:	430a      	orrs	r2, r1
 80007b0:	601a      	str	r2, [r3, #0]
		temp= 0;
 80007b2:	2300      	movs	r3, #0
 80007b4:	61bb      	str	r3, [r7, #24]
 80007b6:	e0e9      	b.n	800098c <gpio_init+0x238>

	//1.2.Interrupt mode
	else
	{
		// Enable the Interrupt mask register
		EXTI->IMR |=   (1 << pGPIOHandle->GPIO_PinCfng.PinNumber);
 80007b8:	4b4f      	ldr	r3, [pc, #316]	; (80008f8 <gpio_init+0x1a4>)
 80007ba:	681b      	ldr	r3, [r3, #0]
 80007bc:	687a      	ldr	r2, [r7, #4]
 80007be:	7912      	ldrb	r2, [r2, #4]
 80007c0:	4611      	mov	r1, r2
 80007c2:	2201      	movs	r2, #1
 80007c4:	408a      	lsls	r2, r1
 80007c6:	4611      	mov	r1, r2
 80007c8:	4a4b      	ldr	r2, [pc, #300]	; (80008f8 <gpio_init+0x1a4>)
 80007ca:	430b      	orrs	r3, r1
 80007cc:	6013      	str	r3, [r2, #0]

		if (pGPIOHandle->GPIO_PinCfng.PinMode == GPIO_MODE_IRQ_FT)
 80007ce:	687b      	ldr	r3, [r7, #4]
 80007d0:	795b      	ldrb	r3, [r3, #5]
 80007d2:	2b04      	cmp	r3, #4
 80007d4:	d117      	bne.n	8000806 <gpio_init+0xb2>
		{	// Enable only the rising trigger selection register
			EXTI->RTSR &= ~(1 << pGPIOHandle->GPIO_PinCfng.PinNumber);
 80007d6:	4b48      	ldr	r3, [pc, #288]	; (80008f8 <gpio_init+0x1a4>)
 80007d8:	689b      	ldr	r3, [r3, #8]
 80007da:	687a      	ldr	r2, [r7, #4]
 80007dc:	7912      	ldrb	r2, [r2, #4]
 80007de:	4611      	mov	r1, r2
 80007e0:	2201      	movs	r2, #1
 80007e2:	408a      	lsls	r2, r1
 80007e4:	43d2      	mvns	r2, r2
 80007e6:	4611      	mov	r1, r2
 80007e8:	4a43      	ldr	r2, [pc, #268]	; (80008f8 <gpio_init+0x1a4>)
 80007ea:	400b      	ands	r3, r1
 80007ec:	6093      	str	r3, [r2, #8]
			EXTI->FTSR|=   (1 << pGPIOHandle->GPIO_PinCfng.PinNumber);
 80007ee:	4b42      	ldr	r3, [pc, #264]	; (80008f8 <gpio_init+0x1a4>)
 80007f0:	68db      	ldr	r3, [r3, #12]
 80007f2:	687a      	ldr	r2, [r7, #4]
 80007f4:	7912      	ldrb	r2, [r2, #4]
 80007f6:	4611      	mov	r1, r2
 80007f8:	2201      	movs	r2, #1
 80007fa:	408a      	lsls	r2, r1
 80007fc:	4611      	mov	r1, r2
 80007fe:	4a3e      	ldr	r2, [pc, #248]	; (80008f8 <gpio_init+0x1a4>)
 8000800:	430b      	orrs	r3, r1
 8000802:	60d3      	str	r3, [r2, #12]
 8000804:	e035      	b.n	8000872 <gpio_init+0x11e>
		}
		else if (pGPIOHandle->GPIO_PinCfng.PinMode == GPIO_MODE_IRQ_RT)
 8000806:	687b      	ldr	r3, [r7, #4]
 8000808:	795b      	ldrb	r3, [r3, #5]
 800080a:	2b05      	cmp	r3, #5
 800080c:	d117      	bne.n	800083e <gpio_init+0xea>
		{
			//Enable only falling trigger selection register
			EXTI->FTSR &= ~(1 << pGPIOHandle->GPIO_PinCfng.PinNumber);
 800080e:	4b3a      	ldr	r3, [pc, #232]	; (80008f8 <gpio_init+0x1a4>)
 8000810:	68db      	ldr	r3, [r3, #12]
 8000812:	687a      	ldr	r2, [r7, #4]
 8000814:	7912      	ldrb	r2, [r2, #4]
 8000816:	4611      	mov	r1, r2
 8000818:	2201      	movs	r2, #1
 800081a:	408a      	lsls	r2, r1
 800081c:	43d2      	mvns	r2, r2
 800081e:	4611      	mov	r1, r2
 8000820:	4a35      	ldr	r2, [pc, #212]	; (80008f8 <gpio_init+0x1a4>)
 8000822:	400b      	ands	r3, r1
 8000824:	60d3      	str	r3, [r2, #12]
			EXTI->RTSR|=   (1 << pGPIOHandle->GPIO_PinCfng.PinNumber);
 8000826:	4b34      	ldr	r3, [pc, #208]	; (80008f8 <gpio_init+0x1a4>)
 8000828:	689b      	ldr	r3, [r3, #8]
 800082a:	687a      	ldr	r2, [r7, #4]
 800082c:	7912      	ldrb	r2, [r2, #4]
 800082e:	4611      	mov	r1, r2
 8000830:	2201      	movs	r2, #1
 8000832:	408a      	lsls	r2, r1
 8000834:	4611      	mov	r1, r2
 8000836:	4a30      	ldr	r2, [pc, #192]	; (80008f8 <gpio_init+0x1a4>)
 8000838:	430b      	orrs	r3, r1
 800083a:	6093      	str	r3, [r2, #8]
 800083c:	e019      	b.n	8000872 <gpio_init+0x11e>
		}
		else if (pGPIOHandle->GPIO_PinCfng.PinMode == GPIO_MODE_IRQ_RFT)
 800083e:	687b      	ldr	r3, [r7, #4]
 8000840:	795b      	ldrb	r3, [r3, #5]
 8000842:	2b06      	cmp	r3, #6
 8000844:	d115      	bne.n	8000872 <gpio_init+0x11e>
		{
			//Enable both falling and rising trigger selection register
			EXTI->RTSR|=   (1 << pGPIOHandle->GPIO_PinCfng.PinNumber);
 8000846:	4b2c      	ldr	r3, [pc, #176]	; (80008f8 <gpio_init+0x1a4>)
 8000848:	689b      	ldr	r3, [r3, #8]
 800084a:	687a      	ldr	r2, [r7, #4]
 800084c:	7912      	ldrb	r2, [r2, #4]
 800084e:	4611      	mov	r1, r2
 8000850:	2201      	movs	r2, #1
 8000852:	408a      	lsls	r2, r1
 8000854:	4611      	mov	r1, r2
 8000856:	4a28      	ldr	r2, [pc, #160]	; (80008f8 <gpio_init+0x1a4>)
 8000858:	430b      	orrs	r3, r1
 800085a:	6093      	str	r3, [r2, #8]
			EXTI->FTSR|=   (1 << pGPIOHandle->GPIO_PinCfng.PinNumber);
 800085c:	4b26      	ldr	r3, [pc, #152]	; (80008f8 <gpio_init+0x1a4>)
 800085e:	68db      	ldr	r3, [r3, #12]
 8000860:	687a      	ldr	r2, [r7, #4]
 8000862:	7912      	ldrb	r2, [r2, #4]
 8000864:	4611      	mov	r1, r2
 8000866:	2201      	movs	r2, #1
 8000868:	408a      	lsls	r2, r1
 800086a:	4611      	mov	r1, r2
 800086c:	4a22      	ldr	r2, [pc, #136]	; (80008f8 <gpio_init+0x1a4>)
 800086e:	430b      	orrs	r3, r1
 8000870:	60d3      	str	r3, [r2, #12]
		}
		//Select the SYSCFG register

		uint32_t value = 0;
 8000872:	2300      	movs	r3, #0
 8000874:	61fb      	str	r3, [r7, #28]
		if (pGPIOHandle->pGPIOx == GPIOA)
 8000876:	687b      	ldr	r3, [r7, #4]
 8000878:	681b      	ldr	r3, [r3, #0]
 800087a:	4a20      	ldr	r2, [pc, #128]	; (80008fc <gpio_init+0x1a8>)
 800087c:	4293      	cmp	r3, r2
 800087e:	d102      	bne.n	8000886 <gpio_init+0x132>
			value = 0;
 8000880:	2300      	movs	r3, #0
 8000882:	61fb      	str	r3, [r7, #28]
 8000884:	e051      	b.n	800092a <gpio_init+0x1d6>
		else if (pGPIOHandle->pGPIOx == GPIOB)
 8000886:	687b      	ldr	r3, [r7, #4]
 8000888:	681b      	ldr	r3, [r3, #0]
 800088a:	4a1d      	ldr	r2, [pc, #116]	; (8000900 <gpio_init+0x1ac>)
 800088c:	4293      	cmp	r3, r2
 800088e:	d102      	bne.n	8000896 <gpio_init+0x142>
			value = 1;
 8000890:	2301      	movs	r3, #1
 8000892:	61fb      	str	r3, [r7, #28]
 8000894:	e049      	b.n	800092a <gpio_init+0x1d6>
		else if (pGPIOHandle->pGPIOx == GPIOC)
 8000896:	687b      	ldr	r3, [r7, #4]
 8000898:	681b      	ldr	r3, [r3, #0]
 800089a:	4a1a      	ldr	r2, [pc, #104]	; (8000904 <gpio_init+0x1b0>)
 800089c:	4293      	cmp	r3, r2
 800089e:	d102      	bne.n	80008a6 <gpio_init+0x152>
			value = 2;
 80008a0:	2302      	movs	r3, #2
 80008a2:	61fb      	str	r3, [r7, #28]
 80008a4:	e041      	b.n	800092a <gpio_init+0x1d6>
		else if (pGPIOHandle->pGPIOx == GPIOD)
 80008a6:	687b      	ldr	r3, [r7, #4]
 80008a8:	681b      	ldr	r3, [r3, #0]
 80008aa:	4a17      	ldr	r2, [pc, #92]	; (8000908 <gpio_init+0x1b4>)
 80008ac:	4293      	cmp	r3, r2
 80008ae:	d102      	bne.n	80008b6 <gpio_init+0x162>
			value = 3;
 80008b0:	2303      	movs	r3, #3
 80008b2:	61fb      	str	r3, [r7, #28]
 80008b4:	e039      	b.n	800092a <gpio_init+0x1d6>
		else if (pGPIOHandle->pGPIOx == GPIOE)
 80008b6:	687b      	ldr	r3, [r7, #4]
 80008b8:	681b      	ldr	r3, [r3, #0]
 80008ba:	4a14      	ldr	r2, [pc, #80]	; (800090c <gpio_init+0x1b8>)
 80008bc:	4293      	cmp	r3, r2
 80008be:	d102      	bne.n	80008c6 <gpio_init+0x172>
			value = 4;
 80008c0:	2304      	movs	r3, #4
 80008c2:	61fb      	str	r3, [r7, #28]
 80008c4:	e031      	b.n	800092a <gpio_init+0x1d6>
		else if (pGPIOHandle->pGPIOx == GPIOF)
 80008c6:	687b      	ldr	r3, [r7, #4]
 80008c8:	681b      	ldr	r3, [r3, #0]
 80008ca:	4a11      	ldr	r2, [pc, #68]	; (8000910 <gpio_init+0x1bc>)
 80008cc:	4293      	cmp	r3, r2
 80008ce:	d102      	bne.n	80008d6 <gpio_init+0x182>
			value = 5;
 80008d0:	2305      	movs	r3, #5
 80008d2:	61fb      	str	r3, [r7, #28]
 80008d4:	e029      	b.n	800092a <gpio_init+0x1d6>
		else if (pGPIOHandle->pGPIOx == GPIOG)
 80008d6:	687b      	ldr	r3, [r7, #4]
 80008d8:	681b      	ldr	r3, [r3, #0]
 80008da:	4a0e      	ldr	r2, [pc, #56]	; (8000914 <gpio_init+0x1c0>)
 80008dc:	4293      	cmp	r3, r2
 80008de:	d102      	bne.n	80008e6 <gpio_init+0x192>
			value = 6;
 80008e0:	2306      	movs	r3, #6
 80008e2:	61fb      	str	r3, [r7, #28]
 80008e4:	e021      	b.n	800092a <gpio_init+0x1d6>
		else if (pGPIOHandle->pGPIOx == GPIOH)
 80008e6:	687b      	ldr	r3, [r7, #4]
 80008e8:	681b      	ldr	r3, [r3, #0]
 80008ea:	4a0b      	ldr	r2, [pc, #44]	; (8000918 <gpio_init+0x1c4>)
 80008ec:	4293      	cmp	r3, r2
 80008ee:	d115      	bne.n	800091c <gpio_init+0x1c8>
			value = 7;
 80008f0:	2307      	movs	r3, #7
 80008f2:	61fb      	str	r3, [r7, #28]
 80008f4:	e019      	b.n	800092a <gpio_init+0x1d6>
 80008f6:	bf00      	nop
 80008f8:	40013c00 	.word	0x40013c00
 80008fc:	40020000 	.word	0x40020000
 8000900:	40020400 	.word	0x40020400
 8000904:	40020800 	.word	0x40020800
 8000908:	40020c00 	.word	0x40020c00
 800090c:	40021000 	.word	0x40021000
 8000910:	40021400 	.word	0x40021400
 8000914:	40021800 	.word	0x40021800
 8000918:	40021c00 	.word	0x40021c00
		else if (pGPIOHandle->pGPIOx == GPIOI)
 800091c:	687b      	ldr	r3, [r7, #4]
 800091e:	681b      	ldr	r3, [r3, #0]
 8000920:	4a6b      	ldr	r2, [pc, #428]	; (8000ad0 <gpio_init+0x37c>)
 8000922:	4293      	cmp	r3, r2
 8000924:	d101      	bne.n	800092a <gpio_init+0x1d6>
			value = 8;
 8000926:	2308      	movs	r3, #8
 8000928:	61fb      	str	r3, [r7, #28]

		SYSCFG_CLK_EN();
 800092a:	4b6a      	ldr	r3, [pc, #424]	; (8000ad4 <gpio_init+0x380>)
 800092c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800092e:	4a69      	ldr	r2, [pc, #420]	; (8000ad4 <gpio_init+0x380>)
 8000930:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000934:	6453      	str	r3, [r2, #68]	; 0x44
		uint32_t exticr_reg = pGPIOHandle->GPIO_PinCfng.PinNumber/4;
 8000936:	687b      	ldr	r3, [r7, #4]
 8000938:	791b      	ldrb	r3, [r3, #4]
 800093a:	089b      	lsrs	r3, r3, #2
 800093c:	b2db      	uxtb	r3, r3
 800093e:	617b      	str	r3, [r7, #20]
		uint32_t exticr_position = pGPIOHandle->GPIO_PinCfng.PinNumber%4;
 8000940:	687b      	ldr	r3, [r7, #4]
 8000942:	791b      	ldrb	r3, [r3, #4]
 8000944:	f003 0303 	and.w	r3, r3, #3
 8000948:	613b      	str	r3, [r7, #16]
		SYSCFG->EXTICR[exticr_reg ] &= ~(value<<4*exticr_position);
 800094a:	4a63      	ldr	r2, [pc, #396]	; (8000ad8 <gpio_init+0x384>)
 800094c:	697b      	ldr	r3, [r7, #20]
 800094e:	3302      	adds	r3, #2
 8000950:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8000954:	693b      	ldr	r3, [r7, #16]
 8000956:	009b      	lsls	r3, r3, #2
 8000958:	69f9      	ldr	r1, [r7, #28]
 800095a:	fa01 f303 	lsl.w	r3, r1, r3
 800095e:	43db      	mvns	r3, r3
 8000960:	495d      	ldr	r1, [pc, #372]	; (8000ad8 <gpio_init+0x384>)
 8000962:	401a      	ands	r2, r3
 8000964:	697b      	ldr	r3, [r7, #20]
 8000966:	3302      	adds	r3, #2
 8000968:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
		SYSCFG->EXTICR[exticr_reg ] |= value<<4*exticr_position;
 800096c:	4a5a      	ldr	r2, [pc, #360]	; (8000ad8 <gpio_init+0x384>)
 800096e:	697b      	ldr	r3, [r7, #20]
 8000970:	3302      	adds	r3, #2
 8000972:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8000976:	693b      	ldr	r3, [r7, #16]
 8000978:	009b      	lsls	r3, r3, #2
 800097a:	69f9      	ldr	r1, [r7, #28]
 800097c:	fa01 f303 	lsl.w	r3, r1, r3
 8000980:	4955      	ldr	r1, [pc, #340]	; (8000ad8 <gpio_init+0x384>)
 8000982:	431a      	orrs	r2, r3
 8000984:	697b      	ldr	r3, [r7, #20]
 8000986:	3302      	adds	r3, #2
 8000988:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

	}

	/*2. Configure GPIO pin speed - each pin has 2 dedicated bits in the GPIO mode register
	hence the value is shifted as multiplication  of 2 relative to pin # */
	temp = (pGPIOHandle->GPIO_PinCfng.PinSpeed << (2* pGPIOHandle->GPIO_PinCfng.PinNumber));
 800098c:	687b      	ldr	r3, [r7, #4]
 800098e:	799b      	ldrb	r3, [r3, #6]
 8000990:	461a      	mov	r2, r3
 8000992:	687b      	ldr	r3, [r7, #4]
 8000994:	791b      	ldrb	r3, [r3, #4]
 8000996:	005b      	lsls	r3, r3, #1
 8000998:	fa02 f303 	lsl.w	r3, r2, r3
 800099c:	61bb      	str	r3, [r7, #24]
	pGPIOHandle->pGPIOx->OSPEEDR &= ~(0x3 << (2 * pGPIOHandle->GPIO_PinCfng.PinNumber)); //Clear the 2 bits
 800099e:	687b      	ldr	r3, [r7, #4]
 80009a0:	681b      	ldr	r3, [r3, #0]
 80009a2:	689a      	ldr	r2, [r3, #8]
 80009a4:	687b      	ldr	r3, [r7, #4]
 80009a6:	791b      	ldrb	r3, [r3, #4]
 80009a8:	005b      	lsls	r3, r3, #1
 80009aa:	2103      	movs	r1, #3
 80009ac:	fa01 f303 	lsl.w	r3, r1, r3
 80009b0:	43db      	mvns	r3, r3
 80009b2:	4619      	mov	r1, r3
 80009b4:	687b      	ldr	r3, [r7, #4]
 80009b6:	681b      	ldr	r3, [r3, #0]
 80009b8:	400a      	ands	r2, r1
 80009ba:	609a      	str	r2, [r3, #8]
	pGPIOHandle->pGPIOx->OSPEEDR |= temp;// Write to the 2 bits
 80009bc:	687b      	ldr	r3, [r7, #4]
 80009be:	681b      	ldr	r3, [r3, #0]
 80009c0:	6899      	ldr	r1, [r3, #8]
 80009c2:	687b      	ldr	r3, [r7, #4]
 80009c4:	681b      	ldr	r3, [r3, #0]
 80009c6:	69ba      	ldr	r2, [r7, #24]
 80009c8:	430a      	orrs	r2, r1
 80009ca:	609a      	str	r2, [r3, #8]
	temp= 0;
 80009cc:	2300      	movs	r3, #0
 80009ce:	61bb      	str	r3, [r7, #24]

	/*3. Configure GPIO pin pull up\pull down register - each pin has 2 dedicated bits
	in the GPIO mode register hence the value is shifted with as multiplication of 2 relative to pin # */
	temp = (pGPIOHandle->GPIO_PinCfng.PinPuPdCtrl << (2* pGPIOHandle->GPIO_PinCfng.PinNumber));
 80009d0:	687b      	ldr	r3, [r7, #4]
 80009d2:	79db      	ldrb	r3, [r3, #7]
 80009d4:	461a      	mov	r2, r3
 80009d6:	687b      	ldr	r3, [r7, #4]
 80009d8:	791b      	ldrb	r3, [r3, #4]
 80009da:	005b      	lsls	r3, r3, #1
 80009dc:	fa02 f303 	lsl.w	r3, r2, r3
 80009e0:	61bb      	str	r3, [r7, #24]
	pGPIOHandle->pGPIOx->PUPDR &= ~(0x3 << ( 2* pGPIOHandle->GPIO_PinCfng.PinNumber)); //Clear the 2 bits
 80009e2:	687b      	ldr	r3, [r7, #4]
 80009e4:	681b      	ldr	r3, [r3, #0]
 80009e6:	68da      	ldr	r2, [r3, #12]
 80009e8:	687b      	ldr	r3, [r7, #4]
 80009ea:	791b      	ldrb	r3, [r3, #4]
 80009ec:	005b      	lsls	r3, r3, #1
 80009ee:	2103      	movs	r1, #3
 80009f0:	fa01 f303 	lsl.w	r3, r1, r3
 80009f4:	43db      	mvns	r3, r3
 80009f6:	4619      	mov	r1, r3
 80009f8:	687b      	ldr	r3, [r7, #4]
 80009fa:	681b      	ldr	r3, [r3, #0]
 80009fc:	400a      	ands	r2, r1
 80009fe:	60da      	str	r2, [r3, #12]
	pGPIOHandle->pGPIOx->PUPDR |= temp;// Write to the 2 bits
 8000a00:	687b      	ldr	r3, [r7, #4]
 8000a02:	681b      	ldr	r3, [r3, #0]
 8000a04:	68d9      	ldr	r1, [r3, #12]
 8000a06:	687b      	ldr	r3, [r7, #4]
 8000a08:	681b      	ldr	r3, [r3, #0]
 8000a0a:	69ba      	ldr	r2, [r7, #24]
 8000a0c:	430a      	orrs	r2, r1
 8000a0e:	60da      	str	r2, [r3, #12]
	temp= 0;
 8000a10:	2300      	movs	r3, #0
 8000a12:	61bb      	str	r3, [r7, #24]

	/*4. Configure GPIO pin output type register - each pin has 1 dedicated bits
	 in the GPIO output type register hence the value is shifted relative to pin #. */
	temp = (pGPIOHandle->GPIO_PinCfng.PinOType << (pGPIOHandle->GPIO_PinCfng.PinNumber));
 8000a14:	687b      	ldr	r3, [r7, #4]
 8000a16:	7a1b      	ldrb	r3, [r3, #8]
 8000a18:	461a      	mov	r2, r3
 8000a1a:	687b      	ldr	r3, [r7, #4]
 8000a1c:	791b      	ldrb	r3, [r3, #4]
 8000a1e:	fa02 f303 	lsl.w	r3, r2, r3
 8000a22:	61bb      	str	r3, [r7, #24]
	pGPIOHandle->pGPIOx->OTYPER &= ~(0x1 << pGPIOHandle->GPIO_PinCfng.PinNumber); //Clear the 2 bits
 8000a24:	687b      	ldr	r3, [r7, #4]
 8000a26:	681b      	ldr	r3, [r3, #0]
 8000a28:	685a      	ldr	r2, [r3, #4]
 8000a2a:	687b      	ldr	r3, [r7, #4]
 8000a2c:	791b      	ldrb	r3, [r3, #4]
 8000a2e:	4619      	mov	r1, r3
 8000a30:	2301      	movs	r3, #1
 8000a32:	408b      	lsls	r3, r1
 8000a34:	43db      	mvns	r3, r3
 8000a36:	4619      	mov	r1, r3
 8000a38:	687b      	ldr	r3, [r7, #4]
 8000a3a:	681b      	ldr	r3, [r3, #0]
 8000a3c:	400a      	ands	r2, r1
 8000a3e:	605a      	str	r2, [r3, #4]
	pGPIOHandle->pGPIOx->OTYPER |= temp;// Write to the bit
 8000a40:	687b      	ldr	r3, [r7, #4]
 8000a42:	681b      	ldr	r3, [r3, #0]
 8000a44:	6859      	ldr	r1, [r3, #4]
 8000a46:	687b      	ldr	r3, [r7, #4]
 8000a48:	681b      	ldr	r3, [r3, #0]
 8000a4a:	69ba      	ldr	r2, [r7, #24]
 8000a4c:	430a      	orrs	r2, r1
 8000a4e:	605a      	str	r2, [r3, #4]
	temp= 0;
 8000a50:	2300      	movs	r3, #0
 8000a52:	61bb      	str	r3, [r7, #24]

	/*5. Configure GPIO pin alternate functionality register - each pin has 4 dedicated bits
	 in it hence the value is shifted as multiplication of 4 relative to pin #. */
	if (pGPIOHandle->GPIO_PinCfng.PinMode == GPIO_MODE_ALTFN)
 8000a54:	687b      	ldr	r3, [r7, #4]
 8000a56:	795b      	ldrb	r3, [r3, #5]
 8000a58:	2b02      	cmp	r3, #2
 8000a5a:	d135      	bne.n	8000ac8 <gpio_init+0x374>
	{
		uint8_t temp1,temp2;
		temp1 = pGPIOHandle->GPIO_PinCfng.PinNumber / 8  ;
 8000a5c:	687b      	ldr	r3, [r7, #4]
 8000a5e:	791b      	ldrb	r3, [r3, #4]
 8000a60:	08db      	lsrs	r3, r3, #3
 8000a62:	73fb      	strb	r3, [r7, #15]
		temp2 = pGPIOHandle->GPIO_PinCfng.PinNumber % 8 ;
 8000a64:	687b      	ldr	r3, [r7, #4]
 8000a66:	791b      	ldrb	r3, [r3, #4]
 8000a68:	f003 0307 	and.w	r3, r3, #7
 8000a6c:	73bb      	strb	r3, [r7, #14]
		pGPIOHandle->pGPIOx->AFR[temp1] &= ~(0xF << (4 * temp2));
 8000a6e:	687b      	ldr	r3, [r7, #4]
 8000a70:	681b      	ldr	r3, [r3, #0]
 8000a72:	7bfa      	ldrb	r2, [r7, #15]
 8000a74:	3208      	adds	r2, #8
 8000a76:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8000a7a:	7bbb      	ldrb	r3, [r7, #14]
 8000a7c:	009b      	lsls	r3, r3, #2
 8000a7e:	220f      	movs	r2, #15
 8000a80:	fa02 f303 	lsl.w	r3, r2, r3
 8000a84:	43db      	mvns	r3, r3
 8000a86:	4618      	mov	r0, r3
 8000a88:	687b      	ldr	r3, [r7, #4]
 8000a8a:	681b      	ldr	r3, [r3, #0]
 8000a8c:	7bfa      	ldrb	r2, [r7, #15]
 8000a8e:	4001      	ands	r1, r0
 8000a90:	3208      	adds	r2, #8
 8000a92:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
		pGPIOHandle->pGPIOx->AFR[temp1] |= (pGPIOHandle->GPIO_PinCfng.PinAltFunc << (4 * temp2)); //write to the 4 bits
 8000a96:	687b      	ldr	r3, [r7, #4]
 8000a98:	681b      	ldr	r3, [r3, #0]
 8000a9a:	7bfa      	ldrb	r2, [r7, #15]
 8000a9c:	3208      	adds	r2, #8
 8000a9e:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8000aa2:	687b      	ldr	r3, [r7, #4]
 8000aa4:	7a5b      	ldrb	r3, [r3, #9]
 8000aa6:	461a      	mov	r2, r3
 8000aa8:	7bbb      	ldrb	r3, [r7, #14]
 8000aaa:	009b      	lsls	r3, r3, #2
 8000aac:	fa02 f303 	lsl.w	r3, r2, r3
 8000ab0:	4618      	mov	r0, r3
 8000ab2:	687b      	ldr	r3, [r7, #4]
 8000ab4:	681b      	ldr	r3, [r3, #0]
 8000ab6:	7bfa      	ldrb	r2, [r7, #15]
 8000ab8:	4301      	orrs	r1, r0
 8000aba:	3208      	adds	r2, #8
 8000abc:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
		temp1 = temp2 = 0;
 8000ac0:	2300      	movs	r3, #0
 8000ac2:	73bb      	strb	r3, [r7, #14]
 8000ac4:	7bbb      	ldrb	r3, [r7, #14]
 8000ac6:	73fb      	strb	r3, [r7, #15]
	}


}
 8000ac8:	bf00      	nop
 8000aca:	3720      	adds	r7, #32
 8000acc:	46bd      	mov	sp, r7
 8000ace:	bd80      	pop	{r7, pc}
 8000ad0:	40022000 	.word	0x40022000
 8000ad4:	40023800 	.word	0x40023800
 8000ad8:	40013800 	.word	0x40013800

08000adc <gpio_configure_pin>:
	{
		GPIOI_RST();
	}
}
void gpio_configure_pin(GPIO_Handle_t *gpio_x_pin, GPIO_RegDef_t* gpio, int pin_number, int output_mode, int pin_speed, int pin_out_mode,int internal_resistor, int alternate_function)
{
 8000adc:	b480      	push	{r7}
 8000ade:	b085      	sub	sp, #20
 8000ae0:	af00      	add	r7, sp, #0
 8000ae2:	60f8      	str	r0, [r7, #12]
 8000ae4:	60b9      	str	r1, [r7, #8]
 8000ae6:	607a      	str	r2, [r7, #4]
 8000ae8:	603b      	str	r3, [r7, #0]
	gpio_x_pin->pGPIOx = gpio;
 8000aea:	68fb      	ldr	r3, [r7, #12]
 8000aec:	68ba      	ldr	r2, [r7, #8]
 8000aee:	601a      	str	r2, [r3, #0]
	gpio_x_pin->GPIO_PinCfng.PinNumber = pin_number;
 8000af0:	687b      	ldr	r3, [r7, #4]
 8000af2:	b2da      	uxtb	r2, r3
 8000af4:	68fb      	ldr	r3, [r7, #12]
 8000af6:	711a      	strb	r2, [r3, #4]
	gpio_x_pin->GPIO_PinCfng.PinMode = output_mode;
 8000af8:	683b      	ldr	r3, [r7, #0]
 8000afa:	b2da      	uxtb	r2, r3
 8000afc:	68fb      	ldr	r3, [r7, #12]
 8000afe:	715a      	strb	r2, [r3, #5]
	gpio_x_pin->GPIO_PinCfng.PinSpeed = pin_speed;
 8000b00:	69bb      	ldr	r3, [r7, #24]
 8000b02:	b2da      	uxtb	r2, r3
 8000b04:	68fb      	ldr	r3, [r7, #12]
 8000b06:	719a      	strb	r2, [r3, #6]
	gpio_x_pin->GPIO_PinCfng.PinOType = pin_out_mode;
 8000b08:	69fb      	ldr	r3, [r7, #28]
 8000b0a:	b2da      	uxtb	r2, r3
 8000b0c:	68fb      	ldr	r3, [r7, #12]
 8000b0e:	721a      	strb	r2, [r3, #8]
	gpio_x_pin->GPIO_PinCfng.PinPuPdCtrl = internal_resistor;
 8000b10:	6a3b      	ldr	r3, [r7, #32]
 8000b12:	b2da      	uxtb	r2, r3
 8000b14:	68fb      	ldr	r3, [r7, #12]
 8000b16:	71da      	strb	r2, [r3, #7]
	gpio_x_pin->GPIO_PinCfng.PinAltFunc = alternate_function;
 8000b18:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000b1a:	b2da      	uxtb	r2, r3
 8000b1c:	68fb      	ldr	r3, [r7, #12]
 8000b1e:	725a      	strb	r2, [r3, #9]
}
 8000b20:	bf00      	nop
 8000b22:	3714      	adds	r7, #20
 8000b24:	46bd      	mov	sp, r7
 8000b26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b2a:	4770      	bx	lr

08000b2c <gpio_write_to_pin>:
	uint16_t value;
	value = (uint16_t)pGPIOx->IDR; // returns the entire register
	return value;
}
void gpio_write_to_pin(GPIO_RegDef_t *pGPIOx, uint8_t PinNumber, uint8_t value)
{
 8000b2c:	b480      	push	{r7}
 8000b2e:	b083      	sub	sp, #12
 8000b30:	af00      	add	r7, sp, #0
 8000b32:	6078      	str	r0, [r7, #4]
 8000b34:	460b      	mov	r3, r1
 8000b36:	70fb      	strb	r3, [r7, #3]
 8000b38:	4613      	mov	r3, r2
 8000b3a:	70bb      	strb	r3, [r7, #2]
	if (value == ENABLE)
 8000b3c:	78bb      	ldrb	r3, [r7, #2]
 8000b3e:	2b01      	cmp	r3, #1
 8000b40:	d109      	bne.n	8000b56 <gpio_write_to_pin+0x2a>
	{
		pGPIOx->ODR |= (1 << PinNumber);
 8000b42:	687b      	ldr	r3, [r7, #4]
 8000b44:	695b      	ldr	r3, [r3, #20]
 8000b46:	78fa      	ldrb	r2, [r7, #3]
 8000b48:	2101      	movs	r1, #1
 8000b4a:	fa01 f202 	lsl.w	r2, r1, r2
 8000b4e:	431a      	orrs	r2, r3
 8000b50:	687b      	ldr	r3, [r7, #4]
 8000b52:	615a      	str	r2, [r3, #20]
	pGPIOx->ODR &= ~ (0x1 << PinNumber);
	pGPIOx->ODR |= (value << PinNumber);
	 */


}
 8000b54:	e009      	b.n	8000b6a <gpio_write_to_pin+0x3e>
		pGPIOx->ODR &= ~(1 << PinNumber);
 8000b56:	687b      	ldr	r3, [r7, #4]
 8000b58:	695b      	ldr	r3, [r3, #20]
 8000b5a:	78fa      	ldrb	r2, [r7, #3]
 8000b5c:	2101      	movs	r1, #1
 8000b5e:	fa01 f202 	lsl.w	r2, r1, r2
 8000b62:	43d2      	mvns	r2, r2
 8000b64:	401a      	ands	r2, r3
 8000b66:	687b      	ldr	r3, [r7, #4]
 8000b68:	615a      	str	r2, [r3, #20]
}
 8000b6a:	bf00      	nop
 8000b6c:	370c      	adds	r7, #12
 8000b6e:	46bd      	mov	sp, r7
 8000b70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b74:	4770      	bx	lr
	...

08000b78 <__libc_init_array>:
 8000b78:	b570      	push	{r4, r5, r6, lr}
 8000b7a:	4e0d      	ldr	r6, [pc, #52]	; (8000bb0 <__libc_init_array+0x38>)
 8000b7c:	4c0d      	ldr	r4, [pc, #52]	; (8000bb4 <__libc_init_array+0x3c>)
 8000b7e:	1ba4      	subs	r4, r4, r6
 8000b80:	10a4      	asrs	r4, r4, #2
 8000b82:	2500      	movs	r5, #0
 8000b84:	42a5      	cmp	r5, r4
 8000b86:	d109      	bne.n	8000b9c <__libc_init_array+0x24>
 8000b88:	4e0b      	ldr	r6, [pc, #44]	; (8000bb8 <__libc_init_array+0x40>)
 8000b8a:	4c0c      	ldr	r4, [pc, #48]	; (8000bbc <__libc_init_array+0x44>)
 8000b8c:	f000 f818 	bl	8000bc0 <_init>
 8000b90:	1ba4      	subs	r4, r4, r6
 8000b92:	10a4      	asrs	r4, r4, #2
 8000b94:	2500      	movs	r5, #0
 8000b96:	42a5      	cmp	r5, r4
 8000b98:	d105      	bne.n	8000ba6 <__libc_init_array+0x2e>
 8000b9a:	bd70      	pop	{r4, r5, r6, pc}
 8000b9c:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8000ba0:	4798      	blx	r3
 8000ba2:	3501      	adds	r5, #1
 8000ba4:	e7ee      	b.n	8000b84 <__libc_init_array+0xc>
 8000ba6:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8000baa:	4798      	blx	r3
 8000bac:	3501      	adds	r5, #1
 8000bae:	e7f2      	b.n	8000b96 <__libc_init_array+0x1e>
 8000bb0:	08000c58 	.word	0x08000c58
 8000bb4:	08000c58 	.word	0x08000c58
 8000bb8:	08000c58 	.word	0x08000c58
 8000bbc:	08000c5c 	.word	0x08000c5c

08000bc0 <_init>:
 8000bc0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000bc2:	bf00      	nop
 8000bc4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000bc6:	bc08      	pop	{r3}
 8000bc8:	469e      	mov	lr, r3
 8000bca:	4770      	bx	lr

08000bcc <_fini>:
 8000bcc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000bce:	bf00      	nop
 8000bd0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000bd2:	bc08      	pop	{r3}
 8000bd4:	469e      	mov	lr, r3
 8000bd6:	4770      	bx	lr
